package com.livelearn.ignorance.activity;

import android.Manifest;
import android.content.Intent;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.widget.TextInputLayout;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.view.View;
import android.widget.AdapterView;
import android.widget.RelativeLayout;

import com.apkfuns.logutils.LogUtils;
import com.flyco.dialog.listener.OnOperItemClickL;
import com.flyco.dialog.widget.ActionSheetDialog;
import com.livelearn.ignorance.R;
import com.livelearn.ignorance.config.Constant;
import com.livelearn.ignorance.entity.UserInfo;
import com.livelearn.ignorance.regular.Validator;
import com.livelearn.ignorance.utils.DeviceUtils;
import com.livelearn.ignorance.utils.GlideUtils;
import com.livelearn.ignorance.utils.IntentUtils;
import com.livelearn.ignorance.utils.PackageUtils;
import com.livelearn.ignorance.utils.ResourceUtils;
import com.livelearn.ignorance.utils.SharedPreferencesUtils;
import com.livelearn.ignorance.utils.ToastUtils;
import com.livelearn.ignorance.widget.jellytogglebutton.JellyToggleButton;
import com.livelearn.ignorance.widget.materiallogin.DefaultLoginView;
import com.livelearn.ignorance.widget.materiallogin.DefaultRegisterView;
import com.livelearn.ignorance.widget.materiallogin.MaterialLoginView;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import am.widget.shapeimageview.ShapeImageView;
import butterknife.BindView;
import butterknife.ButterKnife;
import me.iwf.photopicker.PhotoPickUtils;

public class LoginActivity extends BaseActivity {

    private LoginActivity instance;

    @BindView(R.id.rl_root)
    RelativeLayout rlRoot;

    @BindView(R.id.mlv_login)
    MaterialLoginView mlvLogin;

    private DefaultLoginView loginView;
    private DefaultRegisterView registerView;
    private ShapeImageView loginAvatar;
    private ShapeImageView registerAvatar;
    private JellyToggleButton jtbRemember;
    private String userAvatarPath = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
        ButterKnife.bind(this);
        setSwipeBackEnable(false);
        instance = this;

        initLayout();
        setListeners();
    }

    private void initLayout() {
        loginView = ((DefaultLoginView) mlvLogin.getLoginView());
        loginAvatar = loginView.getIvAvatar();
        GlideUtils.setupImage(instance, loginAvatar, userAvatarPath, new ColorDrawable(ContextCompat.getColor(instance, R.color.lighter_gray)));
        jtbRemember = loginView.getJtbRemember();
        registerView = ((DefaultRegisterView) mlvLogin.getRegisterView());
        registerAvatar = registerView.getIVAvatar();
        GlideUtils.setupImage(instance, registerAvatar, null, new ColorDrawable(ContextCompat.getColor(instance, R.color.lighter_gray)));
    }

    private void setListeners() {
        /**
         * 登录监听
         */
        loginView.setListener(new DefaultLoginView.DefaultLoginViewListener() {

            @Override
            public void onLogin(TextInputLayout loginUser, TextInputLayout loginPass) {
                String userName = checkUserName(loginUser);
                if (userName == null) return;
                loginUser.setError("");

                String pass = checkPass(loginPass);
                if (pass == null) return;
                loginPass.setError("");

                if (jtbRemember.isChecked()) {
                    SharedPreferencesUtils.put(userName, Constant.USER_PASSWORD, pass);
                    SharedPreferencesUtils.put(userName, Constant.REMEMBER_PASSWORD, true);
                }

                ToastUtils.showSuccessToast(ResourceUtils.getString(instance, R.string.login_success));

                UserInfo userInfo = new UserInfo();
                userInfo.setUserName(userName);
                userInfo.setUserAvatarPath(userAvatarPath);
                userInfo.setUserNickName(userName);
                userInfo.setPhoneModel(android.os.Build.MODEL);
                userInfo.setMacAddress(DeviceUtils.getLocalMacAddress());
                userInfo.setHostAddress(DeviceUtils.getHostAddress());
                userInfo.setAndroidId(DeviceUtils.getAndroidId(instance));

                IntentUtils.startActivity(instance, MainActivity.class);
            }
        });
        /**
         * 注册监听
         */
        registerView.setListener(new DefaultRegisterView.DefaultRegisterViewListener() {
            @Override
            public void onRegister(TextInputLayout registerUser, TextInputLayout registerPass, TextInputLayout registerPassRep) {
                String userName = checkUserName(registerUser);
                if (userName == null) return;
                registerUser.setError("");

                String pass = checkPass(registerPass);
                if (pass == null) return;
                registerPass.setError("");

                if (checkPassRep(registerPassRep, pass)) return;
                registerPassRep.setError("");

                saveUserInfo(userName);

                ToastUtils.showSuccessToast(ResourceUtils.getString(instance, R.string.register_success));
                registerView.getCancelRegisterView().performClick();
                GlideUtils.setupImage(instance, loginAvatar, userAvatarPath, new ColorDrawable(ContextCompat.getColor(instance, R.color.lighter_gray)));
            }
        });
        /**
         * 注册头像监听
         */
        registerAvatar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String[] stringItems = getResources().getStringArray(R.array.DialogItem);
                final ActionSheetDialog dialog = new ActionSheetDialog(instance, stringItems, rlRoot);
                dialog.isTitleShow(false).show();
                dialog.setOnOperItemClickL(new OnOperItemClickL() {
                    @Override
                    public void onOperItemClick(AdapterView<?> parent, View view, int position, long id) {
                        checkPermission(position);
                        dialog.dismiss();
                    }
                });
            }
        });
    }

    /**
     * 保存用户信息
     */
    private void saveUserInfo(String userName) {
        String userNameList = SharedPreferencesUtils.getString(Constant.USER_INFO, Constant.USER_NAME);
        ArrayList<String> userNameArray = new ArrayList<>();
        if (userNameList == null) {
            userNameArray.add(userName);
            userNameList = Arrays.toString(userNameArray.toArray());
            LogUtils.e(userNameList);
        } else {
            Collections.addAll(userNameArray, userNameList.split(","));
            userNameArray.add(userName);
        }
        userNameList = Arrays.toString(userNameArray.toArray());
        userNameList = userNameList.substring(1, userNameList.length() - 1);
        SharedPreferencesUtils.put(Constant.USER_INFO, Constant.USER_NAME, userNameList);
        SharedPreferencesUtils.put(userName, Constant.USER_AVATAR, userAvatarPath);
        SharedPreferencesUtils.put(userName, Constant.USER_NAME, userName);
    }

    /**
     * 核对用户名
     */
    private String checkUserName(TextInputLayout registerUser) {
        if (registerUser.getEditText() == null) return null;
        String userName = registerUser.getEditText().getText().toString().trim();
        if (userName.isEmpty()) {
            registerUser.setError(ResourceUtils.getString(instance, R.string.user_name_empty));
            return null;
        } else if (!Validator.isUserName(userName)) {
            registerUser.setError(ResourceUtils.getString(instance, R.string.user_name_error));
            return null;
        }
        return userName;
    }

    /**
     * 核对密码
     */
    @Nullable
    private String checkPass(TextInputLayout registerPass) {
        if (registerPass.getEditText() == null) return null;
        String pass = registerPass.getEditText().getText().toString().trim();
        if (pass.isEmpty()) {
            registerPass.setError(ResourceUtils.getString(instance, R.string.user_password_empty));
            return null;
        } else if (!Validator.isPassword(pass)) {
            registerPass.setError(ResourceUtils.getString(instance, R.string.user_password_error));
            return null;
        }
        return pass;
    }

    /**
     * 核对确认密码
     */
    private boolean checkPassRep(TextInputLayout registerPassRep, String pass) {
        if (registerPassRep.getEditText() == null) return true;
        String passRep = registerPassRep.getEditText().getText().toString().trim();
        if (passRep.isEmpty()) {
            registerPassRep.setError(ResourceUtils.getString(instance, R.string.user_password_empty));
            return true;
        } else if (!Validator.isPassword(passRep)) {
            registerPassRep.setError(ResourceUtils.getString(instance, R.string.user_passwordRep_error));
            return true;
        } else if (!pass.equals(passRep)) {
            registerPassRep.setError(ResourceUtils.getString(instance, R.string.user_password_different));
            return true;
        }
        return false;
    }

    /**
     * 检查授权
     */
    private void checkPermission(int requestCode) {
        boolean readStoragePermissionGranted = !PackageUtils.checkPermission(instance, Manifest.permission.READ_EXTERNAL_STORAGE);
        boolean cameraPermissionGranted = !PackageUtils.checkPermission(instance, Manifest.permission.CAMERA);
        if (readStoragePermissionGranted || cameraPermissionGranted) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(instance,
                    Manifest.permission.READ_EXTERNAL_STORAGE)
                    || ActivityCompat.shouldShowRequestPermissionRationale(instance,
                    Manifest.permission.CAMERA)) {
                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.
            } else {
                String[] permissions;
                if (readStoragePermissionGranted && cameraPermissionGranted) {
                    permissions = new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.CAMERA};
                } else {
                    permissions = new String[]{
                            readStoragePermissionGranted ? Manifest.permission.READ_EXTERNAL_STORAGE
                                    : Manifest.permission.CAMERA
                    };
                }
                ActivityCompat.requestPermissions(instance,
                        permissions,
                        requestCode);
            }
        } else {
            //Permission granted
            if (requestCode == 0) {
                PhotoPickUtils.cropFromCamera(instance);
            } else if (requestCode == 1) {
                PhotoPickUtils.startGallerySingle(instance, true, true);
            }
        }
    }

    @Override
    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        switch (permission) {
            case Manifest.permission.READ_EXTERNAL_STORAGE:
            case Manifest.permission.CAMERA:
                return false;
            default:
                return true;
        }
    }

    @Override
    protected void onActivityResult(final int requestCode, int resultCode, final Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        PhotoPickUtils.handleResult(instance, requestCode, resultCode, data, new PhotoPickUtils.CropHandler() {
            @Override
            public void handleCropResult(Uri uri, int tag) {
                userAvatarPath = uri.getPath();
                GlideUtils.setupCircleImage(instance, registerAvatar, userAvatarPath);
            }

            @Override
            public void handleCropError(Intent data) {

            }
        });
    }
}
