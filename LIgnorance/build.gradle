apply plugin: 'com.android.application'
//ButterKnife
apply plugin: 'com.jakewharton.butterknife'
//使用greendao
apply plugin: 'org.greenrobot.greendao'
apply from: "${rootDir}/gradle/version.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        //应用包名
        applicationId "com.livelearn.ignorance"
        //最小sdk版本，如果设备小于这个版本或者大于maxSdkVersion(一般不用)将无法安装这个应用
        minSdkVersion rootProject.ext.minSdkVersion
        //目标sdk版本，如果设备等于这个版本那么android平台就不进行兼容性检查，运行效率会高一点
        targetSdkVersion rootProject.ext.targetSdkVersion
        //版本更新了几次，第一版应用是1，以后每更新一次加1
        versionCode rootProject.ext.versionCode
        //版本信息，这个会显示给用户，就是用户看到的版本号
        versionName rootProject.ext.versionName

        //当方法数超过65535(方法的索引使用的是一个short值，而short最大值是65535)的时候允许打包成多个dex文件，动态加载dex
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //对Vector兼容性的支持
        vectorDrawables.useSupportLibrary = true

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86'
            //'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }

    //签名配置
    signingConfigs {
        release {
            def filePrivateProperties = file("private.properties")
            if (filePrivateProperties.exists()) {
                Properties propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['key.store'])
                keyAlias propsPrivate['key.alias']
                storePassword propsPrivate['key.store.password']
                keyPassword propsPrivate['key.alias.password']
            }
        }
    }

    //默认的一些文件路径的配置
    sourceSets {
        main {
            //资源文件
            assets.srcDirs = ['src/main/assets']
            //jni文件
            jni.srcDirs 'src/main/jni'
            //jni库
            jniLibs.srcDirs = ['src/main/jniLibs', 'libs']
        }
    }

    //multiDex的一些相关配置，这样配置可以让你的编译速度更快
    dexOptions {
        //最大堆内存
        javaMaxHeapSize "8g"
        //是否支持大工程模式
        jumboMode true
        //预编译
        preDexLibraries true
        //
        dexInProcess true
        //最大进程数
        maxProcessCount 8
        //线程数
        threadCount 8
    }

    //表示构建类型。包括release和debug两种。可以在这里面配置启用混淆、zipAlign、签名信息等。
    buildTypes {
        //release版本的配置
        release {
            //签名配置
            def filePrivateProperties = file("private.properties")
            if (filePrivateProperties.exists()) {
                signingConfig signingConfigs.release
            }
            //不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //是否进行混淆
            minifyEnabled true
            //是否支持zip
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            //是否支持调试
            debuggable false
            //关闭jni调试
            jniDebuggable false
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //debug版本的配置
        debug {
            //显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"

            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            debuggable true
            jniDebuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    //在这里你可以进行 Java 的版本配置，以便使用对应版本的一些新特性
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    //为了解决部分第三方库重复打包了META-INF的问题,重复什么就排除什么
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        warning 'InvalidPackage'
        //打包release版本的时候进行检测
        checkReleaseBuilds false
        //即使报错也不会停止打包
        abortOnError false
    }

    //导入数据绑定框架dataBinding支持
    dataBinding {
        enabled true
    }

    //数据库ORM框架之GreenDao配置
    greendao {
        //指定数据库schema版本号，迁移、新增等操作会用到
        schemaVersion 2
        //通过gradle插件生成的数据库相关文件的包名，默认为你的entity所在的包名
        daoPackage 'com.livelearn.ignorance.model.db.dbdao'
        //自定义生成数据库文件的目录
        targetGenDir 'src/main/java'
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

final FRESCO_VERSION = rootProject.ext.FRESCO_VERSION
final OKHTTP3_VERSION = rootProject.ext.OKHTTP3_VERSION
final PICASSO_VERSION = rootProject.ext.PICASSO_VERSION
final SUPPORT_VERSION = rootProject.ext.SUPPORT_VERSION

//里面是项目的依赖信息，包括jar包和第三方库等信息
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation files('libs/rebound-core.jar')
    testImplementation 'junit:junit:4.12'
    /**
     * Support Libs
     */
    implementation "com.android.support:support-v4:$SUPPORT_VERSION"
    implementation "com.android.support:animated-vector-drawable:$SUPPORT_VERSION"
    implementation "com.android.support:support-vector-drawable:$SUPPORT_VERSION"
    implementation "com.android.support:support-compat:$SUPPORT_VERSION"
    implementation "com.android.support:appcompat-v7:$SUPPORT_VERSION"
    implementation "com.android.support:design:$SUPPORT_VERSION"
    implementation "com.android.support:palette-v7:$SUPPORT_VERSION"
    implementation "com.android.support:preference-v7:$SUPPORT_VERSION"
    implementation "com.android.support:support-annotations:$SUPPORT_VERSION"
    /**
     * 应用方法数爆棚解决方案
     */
    implementation 'com.android.support:multidex:1.0.3'
    /**
     * 约束布局
     */
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-alpha2'
    /**
     * 再循环视图
     */
    implementation "com.android.support:recyclerview-v7:$SUPPORT_VERSION"
    /**
     * 卡片view，可以设置阴影，圆角等等
     */
    implementation "com.android.support:cardview-v7:$SUPPORT_VERSION"
    /**
     * 解放控件对象实例化,监听添加
     */
    implementation "com.jakewharton:butterknife:${VERSION_BUTTERKNIFE}"
    implementation "com.jakewharton:butterknife-compiler:${VERSION_BUTTERKNIFE}"
    implementation "com.jakewharton:butterknife-annotations:${VERSION_BUTTERKNIFE}"
    /**
     * 各种风格的Dialog
     */
//    implementation project(path: ':FlycoDialog')
    implementation(name: 'FlycoDialog-1.3.2', ext: 'aar')
    /**
     * 快速创建对话框工具类库,集成了sweet-alert-dialog,Titanic的进度框动画样式,AVLoadingIndicatorView的动画样式
     */
//    implementation project(path: ':CBDialog')
    implementation(name: 'CBDialog-1.0', ext: 'aar')
    implementation 'net.frakbot:jumpingbeans:1.3.0'
    /**
     * 微博和微信加载高清长图却不OOM,双击放大，单击返回，手动放大等，目前只能加载本地
     */
//    implementation project(path: ':SubsamplingScaleImageView')
    implementation(name: 'SubsamplingScaleImageView-1.0', ext: 'aar')
    /**
     * 拍照、从相册选择图片
     */
    implementation project(path: ':PhotoPicker')
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'cn.finalteam:toolsfinal:1.1.5'
    /**
     * 剪裁图片
     */
    implementation project(path: ':Ucrop')
    /**
     * Glide Google推荐的图片加载库，专注于流畅的滚动
     */
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    /**
     * Glide图形转换工具
     */
    implementation 'jp.wasabeef:glide-transformations:2.0.1'
    /**
     * GPUImage
     */
    implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0'
    /**
     * Android日志管理器，支持对象、List、Map、数组等输出
     */
    implementation 'com.apkfuns.logutils:library:1.0.4'
    /**
     * 使用CircularReveal动画效果进行页面平面展开切换
     */
    implementation('com.github.ozodrukh:CircularReveal:1.3.1@aar') {
        transitive = true
    }
    /**
     * 可以自定义各种形状的 ImageView, 并且支持边框
     */
    implementation 'am.widget:shapeimageview:1.1.0'
    /**
     * rxjava
     */
    implementation 'io.reactivex:rxjava:1.1.9'
    /**
     * rxandroid
     */
    implementation 'io.reactivex:rxandroid:1.2.1'
    /**
     * retrofit
     */
    implementation 'com.squareup.retrofit2:retrofit:2.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.0.0'
    /**
     * okhttp3
     */
    implementation "com.squareup.okhttp3:okhttp:$OKHTTP3_VERSION"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    /**
     * rxcache
     */
    implementation 'com.github.VictorAlbertos.RxCache:core:1.4.6'
    /**
     * RxPermissions权限管理
     */
    implementation('com.tbruyelle.rxpermissions:rxpermissions:0.8.2@aar') {
        exclude module: 'rxjava'
    }
    /**
     * eventbus
     */
    implementation 'org.simple:androideventbus:1.0.5.1'
    /**
     * Java的HTML解析器，可直接解析URL地址、HTML文本内容
     */
    implementation 'org.jsoup:jsoup:1.9.2'
    /**
     * fresco 控件
     */
    implementation "com.facebook.fresco:drawee:$FRESCO_VERSION"
    /**
     * FaceBook图片加载库
     */
    implementation "com.facebook.fresco:fresco:$FRESCO_VERSION"
    /**
     * FaceBook图片加载库Fresco的使用帮助类
     */
//    implementation project(path: ':FrescoHelper')
    implementation(name: 'FrescoHelper-1.0.1', ext: 'aar')
    implementation 'com.facebook.fresco:animated-base-support:0.14.1'
    implementation 'com.facebook.fresco:animated-gif:0.14.1'
    implementation 'com.facebook.fresco:webpsupport:0.14.1'
    implementation 'com.facebook.fresco:animated-webp:0.14.1'
    implementation 'com.facebook.fresco:imagepipeline-okhttp3:0.14.1'
    /**
     * Fresco的封装，快速上手，图像后处理，超大图高清预览，缩小放大，双击放大等一一俱全
     */
//    implementation project(path: ':FrescoUtils')
    implementation(name: 'FrescoUtils-1.0', ext: 'aar')
    implementation 'me.relex:photodraweeview:1.1.2'
    /**
     * Square公司开源的一个Android图形缓存库
     */
    implementation 'com.squareup.picasso:picasso:2.5.2'
    /**
     * 十分灵活且功能强大的流式布局，而且使用方便
     */
//    implementation project(path: ':DragWithFlowLayout')
    implementation(name: 'DragWithFlowLayout-1.0', ext: 'aar')
    /**
     * 支持下拉刷新,加载更多,没有更多,自定义加载页面,空白页面,ArrayAdapter,Header/Footer,使用简单
     */
//    implementation project(path: ':EasyRecyclerView')
    implementation(name: 'EasyRecyclerView-1.0', ext: 'aar')
    /**
     * viewpager的图片轮播框架,支持无限循环,触摸时暂停轮播,设置播放时间间隔、透明度、指示器（指示器可以是默认原点，数字，也可以自定义图片）
     */
    implementation 'com.jude:rollviewpager:1.3.2'
    /**
     * FloatingActionButton 悬浮活动菜单按钮
     */
//    implementation project(path: ':FloatingActionButton')
    implementation(name: 'FloatingActionButton-1.6.0', ext: 'aar')
    /**
     * 顶部显示Snackbar
     */
    implementation project(path: ':TopSnackbar')
    /**
     * 阿里云对象存储OSS
     */
//    implementation project(path: ':ALiYunOSS')
    implementation(name: 'ALiYunOSS-2.3.0', ext: 'aar')
    /**
     * 鲁班压缩 类似于微信朋友圈的压缩算法
     */
    implementation project(path: ':LubanCompress')
    /**
     * 通用的Item布局(左边为不变部分：图标加文字，右边为可变部分：文字、文字加箭头、箭头、开关按钮)
     */
//    implementation project(path: ':BaseItemLayout')
    implementation(name: 'BaseItemLayout-2.0.0', ext: 'aar')
    implementation 'io.reactivex.rxjava2:rxjava:2.0.0'
    implementation 'commons-io:commons-io:2.5'
    implementation 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    /**
     * 共用头部且滚动中固定导航栏的Viewpager,支持listview,recyclerview,gridview,webview,scrollview.支持下拉刷新
     */
    implementation project(path: ':StickyHeaderViewPager')
    /**
     * 快速实现异常奔溃统一管理,页面加载中、加载失败、无数据等状态以及下拉刷新和自动加载
     */
//    implementation project(path: ':LCRapidDevelop')
    implementation(name: 'LCRapidDevelop-1.0', ext: 'aar')
    /**
     * Banner实现无限循环,集成简单
     */
    implementation 'cn.bingoogolapple:bga-banner:2.0.9@aar'
    /**
     * 仿哔哩哔哩搜索框效果
     */
    implementation project(path: ':SearchDialog')
    /**
     * 监听滚动视图滚动事件的库，帮助与Toolbar的交互动效处理与MaterialDesign的实现
     */
    debugImplementation project(path: ':ObservableScrollView')
    /**
     * Release build uses the synced latest version
     */
    releaseImplementation "com.github.ksoichiro:android-observablescrollview:${VERSION_OBSERVABLEVIEW}"
    /**
     * 下拉刷新加载更多组件
     */
    implementation project(path: ':PullToRefreshWithLoadMore')
    /**
     * Json解析之Gson
     */
    implementation 'com.google.code.gson:gson:2.7'
    /**
     * GreenDAO 优势: 一个精简的库; 性能最大化; 内存开销最小化; 易于使用的APIs; 对Android进行高度优化
     */
    implementation 'org.greenrobot:greendao:3.2.0'
    /**
     * 标签Span、文本Span（可点击）、图片Span
     */
    implementation project(path: ':SimplifySpan')
    /**
     * 平滑可定制的进度条
     */
    implementation project(path: ':SmoothProgressBar')
    /**
     * 分组悬停、索引右侧边栏
     */
    implementation project(path: ':SuspensionIndexBar')
    /**
     * 强大的大图查看库
     */
//    implementation project(path: ':BigImageViewer')
    implementation(name: 'BigImageViewer-1.2.0', ext: 'aar')
    /**
     * 可收缩展开的TextView
     */
//    implementation project(path: ':ExpandableTextView')
    implementation(name: 'ExpandableTextView-1.0.0', ext: 'aar')
    /**
     * 上拉面板效果
     */
    implementation project(path: ':SlidingUpPanelLayout')
    /**
     * 从缩略图到原图的无缝过渡转变，功能体系仿照并涵盖ios版本的QQ、微信朋友圈、新浪微博的图片浏览功能。
     */
    implementation project(path: ':Transferee')
    implementation 'com.zhy:base-adapter:3.0.3'
    /**
     * 基于HttpURLConnection简单易用的网络库，支持Http，Https，Http文件上传，图片加载，面向接口的API调用方式，轻量的设计风格
     */
    implementation 'cn.alien95:resthttp:1.0.6'
    /**
     * 简单的带有动画效果的加载控件
     */
    implementation project(path: ':LoadingView')
    /**
     * 节操视频播放控件
     */
//    implementation project(path: ':JieCaoVideoPlayer')
    implementation(name: 'JieCaoVideoPlayer-5.5.4', ext: 'aar')
    /**
     * VirtualLayout是一个针对RecyclerView的LayoutManager扩展, 主要提供一整套布局方案和布局间的组件复用的问题。
     */
    implementation('com.alibaba.android:vlayout:1.0.9@aar') {
        transitive = true
    }
    /**
     * 强大、可定制、易扩展的 ViewPager 指示器框架。是ViewPagerIndicator、TabLayout、PagerSlidingTabStrip的最佳替代品。
     */
    implementation project(path: ':MagicIndicator')
    /**
     * 快速开发工具类收集，史上最全的开发工具类
     */
//    implementation project(path: ':CommonUtils')
    implementation(name: 'CommonUtils-1.0', ext: 'aar')
    /**
     * IjkPlayer/MediaPlayer+TextureView，完美切换全屏、小窗口的Android视频播放器
     */
    implementation project(path: ':NiceVideoPlayer')
    /**
     * 基于Vitamio，支持手动全屏播放，手势调整进度，音量，亮度，基本满足市面上播放器要求
     */
    implementation project(path: ':Vitamio')
}

