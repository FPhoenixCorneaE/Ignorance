apply plugin: 'com.android.application'
apply plugin: 'thinR'
//使用greendao
apply plugin: 'org.greenrobot.greendao'
apply from: "${rootDir}/gradle/version.gradle"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    productFlavors {
        dev {
            minSdkVersion 19
        }
        prod {
            minSdkVersion 17
        }
    }

    //设置你的产品发布的一些东西，比如软件需要发布到不同渠道，且不同渠道中的包名不同，那么可以在此进行配置,甚至可以设置不同的AndroidManifest.xml文件。
    productFlavors {
        LI_UC {}
        LI_360 {}
    }

    //所谓ProductFlavors其实就是可定义的产品特性，
    //配合 manifest merger 使用的时候就可以达成在一次编译
    //过程中产生多个具有自己特性配置的版本。
    //这个配置的作用就是，为每个渠道包产生不同的 UMENG_CHANNEL_VALUE 的值。
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    //签名配置
//    signingConfigs {
//        config_release {
//            keyAlias 'appcert.key'
//            keyPassword 'password'
//            storeFile file('location...')
//            storePassword 'password'
//        }
//    }
    signingConfigs {
        release {
            def filePrivateProperties = file("private.properties")
            if (filePrivateProperties.exists()) {
                Properties propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['key.store'])
                keyAlias propsPrivate['key.alias']
                storePassword propsPrivate['key.store.password']
                keyPassword propsPrivate['key.alias.password']
            }
        }
    }

    defaultConfig {
        //应用包名
        applicationId "com.livelearn.ignorance"
        //最小sdk版本，如果设备小于这个版本或者大于maxSdkVersion(一般不用)将无法安装这个应用
        minSdkVersion 17
        //目标sdk版本，如果设备等于这个版本那么android平台就不进行兼容性检查，运行效率会高一点
        targetSdkVersion 25
        //版本更新了几次，第一版应用是1，以后每更新一次加1
        versionCode 1
        //版本信息，这个会显示给用户，就是用户看到的版本号
        versionName "1.0"

        //当方法数超过65535(方法的索引使用的是一个short值，而short最大值是65535)的时候允许打包成多个dex文件，动态加载dex
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //对Vector兼容性的支持
        vectorDrawables.useSupportLibrary = true

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    //默认的一些文件路径的配置
    sourceSets {
        main {
            //资源文件
            assets.srcDirs = ['src/main/assets']
            //jni文件
            jni.srcDirs 'src/main/jni'
            //jni库
            jniLibs.srcDir 'src/main/jniLibs'
        }
    }

    //multiDex的一些相关配置，这样配置可以让你的编译速度更快
    dexOptions {
        maxProcessCount 6
        //增加java堆内存大小
        javaMaxHeapSize "6g"
        //让它不要对Lib做preDexing
        preDexLibraries = false
        //忽略方法数限制的检查
        jumboMode = true
    }

    //表示构建类型。包括release和debug两种。可以在这里面配置启用混淆、zipAlign、签名信息等。
    buildTypes {
        //release版本的配置
        release {
            //签名配置
//            signingConfig signingConfigs.config_release
            def filePrivateProperties = file("private.properties")
            if (filePrivateProperties.exists()) {
                signingConfig signingConfigs.release
            }
            //不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //是否进行混淆
            minifyEnabled true
            //是否支持zip
            zipAlignEnabled true
            //移除无用的resource文件
            shrinkResources true
            //是否支持调试
            debuggable false
            //关闭jni调试
            jniDebuggable false
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //debug版本的配置
        debug {
            //显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"

            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            debuggable true
            jniDebuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    //在这里你可以进行 Java 的版本配置，以便使用对应版本的一些新特性
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    //为了解决部分第三方库重复打包了META-INF的问题,重复什么就排除什么
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        warning 'InvalidPackage'
        //打包release版本的时候进行检测
        checkReleaseBuilds false
        //即使报错也不会停止打包
        abortOnError false
    }

    //导入数据绑定框架dataBinding支持
    dataBinding {
        enabled true
    }

    thinR {
        //为了不影响日常开发的编译速度，debug版本可以不用删除R
        skipThinRDebug = true
    }

    //数据库ORM框架之GreenDao配置
    greendao {
        //指定数据库schema版本号，迁移等操作会用到
        schemaVersion 1
        //通过gradle插件生成的数据库相关文件的包名，默认为你的entity所在的包名
        daoPackage 'com.livelearn.ignorance.model.db.dbdao'
        //自定义生成数据库文件的目录
        targetGenDir 'src/main/java'
    }

    //采用动态替换字符串的方式生成不同的apk
    applicationVariants.all { variant ->
        def output = variant.outputs.get(0)
        File apk = output.outputFile
        String newName = output.outputFile.name.replace(".apk", "-${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}-${project.ext.versionInfo.build}.apk")
                .replace("app-", "${variant.mergedFlavor.applicationId}-")
        output.outputFile = new File(apk.parentFile, newName)
    }
}

//里面是项目的依赖信息，包括jar包和第三方库等信息
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/rebound-core.jar')
    testCompile 'junit:junit:4.12'
    /**
     * Support Libs
     */
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:animated-vector-drawable:25.3.1'
    compile 'com.android.support:support-vector-drawable:25.3.1'
    compile 'com.android.support:support-compat:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:palette-v7:25.3.1'
    compile 'com.android.support:preference-v7:25.3.1'
    /**
     * 应用方法数爆棚解决方案
     */
    compile 'com.android.support:multidex:1.0.1'
    /**
     * 约束布局
     */
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha8'
    /**
     * 再循环视图
     */
    compile 'com.android.support:recyclerview-v7:25.3.1'
    /**
     * 卡片view，可以设置阴影，圆角等等
     */
    compile 'com.android.support:cardview-v7:25.3.1'
    /**
     * 解放控件对象实例化,监听添加
     */
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    /**
     * 各种风格的Dialog
     */
    compile project(path: ':FlycoDialog')
    /**
     * 快速创建对话框工具类库,集成了sweet-alert-dialog,Titanic的进度框动画样式,AVLoadingIndicatorView的动画样式
     */
    compile project(path: ':CBDialog')
    /**
     * 拍照、从相册选择图片
     */
    compile project(path: ':PhotoPicker')
    /**
     * Google推荐的图片加载库，专注于流畅的滚动
     */
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'jp.wasabeef:glide-transformations:2.0.1'
    /**
     * Android日志管理器，支持对象、List、Map、数组等输出
     */
    compile 'com.apkfuns.logutils:library:1.0.4'
    /**
     * 使用CircularReveal动画效果进行页面平面展开切换
     */
    compile('com.github.ozodrukh:CircularReveal:1.3.1@aar') {
        transitive = true;
    }
    /**
     * 可以自定义各种形状的 ImageView, 并且支持边框
     */
    compile 'am.widget:shapeimageview:1.1.0'
    /**
     * rxjava
     */
    compile 'io.reactivex:rxjava:1.1.9'
    /**
     * rxandroid
     */
    compile 'io.reactivex:rxandroid:1.2.1'
    /**
     * retrofit
     */
    compile 'com.squareup.retrofit2:retrofit:2.0.0'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0'
    /**
     * okhttp3
     */
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    /**
     * rxcache
     */
    compile 'com.github.VictorAlbertos.RxCache:core:1.4.6'
    /**
     * RxPermissions权限管理
     */
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.8.0@aar'
    /**
     * eventbus
     */
    compile 'org.simple:androideventbus:1.0.5.1'
    /**
     * Java的HTML解析器，可直接解析URL地址、HTML文本内容
     */
    compile 'org.jsoup:jsoup:1.9.2'
    /**
     * fresco 控件
     */
    compile 'com.facebook.fresco:drawee:0.14.1'
    /**
     * FaceBook图片加载库Fresco的使用帮助类
     */
    compile project(path: ':FrescoHelper')
    /**
     * Fresco的封装，快速上手，图像后处理，超大图高清预览，缩小放大，双击放大等一一俱全
     */
    compile project(path: ':FrescoUtils')
    /**
     * Square公司开源的一个Android图形缓存库
     */
    compile 'com.squareup.picasso:picasso:2.5.2'
    /**
     * 十分灵活且功能强大的流式布局，而且使用方便
     */
    compile project(path: ':DragWithFlowLayout')
    /**
     * 支持下拉刷新,加载更多,没有更多,自定义加载页面,空白页面,ArrayAdapter,Header/Footer,使用简单
     */
    compile project(path: ':EasyRecyclerView')
    /**
     * viewpager的图片轮播框架,支持无限循环,触摸时暂停轮播,设置播放时间间隔、透明度、指示器（指示器可以是默认原点，数字，也可以自定义图片）
     */
    compile 'com.jude:rollviewpager:1.3.2'
    /**
     * FloatingActionButton 悬浮活动菜单按钮
     */
    compile project(path: ':FloatingActionButton')
    /**
     * 顶部显示Snackbar
     */
    compile project(path: ':TopSnackbar')
    /**
     * 阿里云对象存储OSS
     */
    compile project(path: ':ALiYunOSS')
    /**
     * 鲁班压缩 类似于微信朋友圈的压缩算法
     */
    compile project(path: ':LubanCompress')
    /**
     * 通用的Item布局(左边为不变部分：图标加文字，右边为可变部分：文字、文字加箭头、箭头、开关按钮)
     */
    compile project(path: ':BaseItemLayout')
    /**
     * 共用头部且滚动中固定导航栏的Viewpager,支持listview,recyclerview,gridview,webview,scrollview.支持下拉刷新
     */
    compile project(path: ':StickyHeaderViewPager')
    /**
     * 快速实现异常奔溃统一管理,页面加载中、加载失败、无数据等状态以及下拉刷新和自动加载
     */
    compile project(path: ':LCRapidDevelop')
    /**
     * Banner实现无限循环,集成简单
     */
    compile 'cn.bingoogolapple:bga-banner:2.0.9@aar'
    /**
     * 仿哔哩哔哩搜索框效果
     */
    compile project(path: ':SearchDialog')
    /**
     * 监听滚动视图滚动事件的库，帮助与Toolbar的交互动效处理与MaterialDesign的实现
     */
    debugCompile project(path: ':ObservableScrollView')
    /**
     * Release build uses the synced latest version
     */
    releaseCompile "com.github.ksoichiro:android-observablescrollview:${SYNCED_VERSION_NAME_OBSERVABLEVIEW}"
    /**
     * 下拉刷新加载更多组件
     */
    compile project(path: ':PullToRefreshWithLoadMore')
    /**
     * Json解析之Gson
     */
    compile 'com.google.code.gson:gson:2.7'
    /**
     * GreenDAO 优势: 一个精简的库; 性能最大化; 内存开销最小化; 易于使用的APIs; 对Android进行高度优化
     */
    compile 'org.greenrobot:greendao:3.2.0'
    /**
     * 标签Span、文本Span（可点击）、图片Span
     */
    compile project(path: ':SimplifySpan')
    /**
     * 平滑可定制的进度条
     */
    compile project(path: ':SmoothProgressBar')
    /**
     * 分组悬停、索引右侧边栏
     */
    compile project(path: ':SuspensionIndexBar')
    /**
     * 强大的大图查看库
     */
    compile project(path: ':BigImageViewer')
    /**
     * 可收缩展开的TextView
     */
    compile project(path: ':ExpandableTextView')
    /**
     * 上拉面板效果
     */
    compile project(path: ':SlidingUpPanelLayout')
    /**
     * 从缩略图到原图的无缝过渡转变，功能体系仿照并涵盖ios版本的QQ、微信朋友圈、新浪微博的图片浏览功能。
     */
    compile project(path: ':Transferee')
    /**
     * 基于HttpURLConnection简单易用的网络库，支持Http，Https，Http文件上传，图片加载，面向接口的API调用方式，轻量的设计风格
     */
    compile 'cn.alien95:resthttp:1.0.6'
    /**
     * 简单的带有动画效果的加载控件
     */
    compile project(path: ':LoadingView')
    /**
     * 节操视频播放控件
     */
    compile 'fm.jiecao:jiecaovideoplayer:5.5.4'
    /**
     * VirtualLayout是一个针对RecyclerView的LayoutManager扩展, 主要提供一整套布局方案和布局间的组件复用的问题。
     */
    compile('com.alibaba.android:vlayout:1.0.9@aar') {
        transitive = true
    }
}

