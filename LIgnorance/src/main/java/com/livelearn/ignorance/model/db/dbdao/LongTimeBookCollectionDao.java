package com.livelearn.ignorance.model.db.dbdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.livelearn.ignorance.model.db.dbentity.LongTimeBookCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LONG_TIME_BOOK_COLLECTION".
*/
public class LongTimeBookCollectionDao extends AbstractDao<LongTimeBookCollection, Long> {

    public static final String TABLENAME = "LONG_TIME_BOOK_COLLECTION";

    /**
     * Properties of entity LongTimeBookCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Book_name = new Property(1, String.class, "book_name", false, "BOOK_NAME");
        public final static Property Book_image_url = new Property(2, String.class, "book_image_url", false, "BOOK_IMAGE_URL");
        public final static Property Book_author = new Property(3, String.class, "book_author", false, "BOOK_AUTHOR");
        public final static Property Book_type = new Property(4, String.class, "book_type", false, "BOOK_TYPE");
        public final static Property Book_length = new Property(5, String.class, "book_length", false, "BOOK_LENGTH");
        public final static Property Book_progress = new Property(6, String.class, "book_progress", false, "BOOK_PROGRESS");
        public final static Property Book_update_time = new Property(7, String.class, "book_update_time", false, "BOOK_UPDATE_TIME");
        public final static Property Book_download = new Property(8, String.class, "book_download", false, "BOOK_DOWNLOAD");
        public final static Property Book_introduction = new Property(9, String.class, "book_introduction", false, "BOOK_INTRODUCTION");
        public final static Property Book_read_url = new Property(10, String.class, "book_read_url", false, "BOOK_READ_URL");
        public final static Property Collected_time = new Property(11, String.class, "collected_time", false, "COLLECTED_TIME");
    }


    public LongTimeBookCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public LongTimeBookCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LONG_TIME_BOOK_COLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_NAME\" TEXT NOT NULL ," + // 1: book_name
                "\"BOOK_IMAGE_URL\" TEXT NOT NULL ," + // 2: book_image_url
                "\"BOOK_AUTHOR\" TEXT," + // 3: book_author
                "\"BOOK_TYPE\" TEXT," + // 4: book_type
                "\"BOOK_LENGTH\" TEXT," + // 5: book_length
                "\"BOOK_PROGRESS\" TEXT," + // 6: book_progress
                "\"BOOK_UPDATE_TIME\" TEXT," + // 7: book_update_time
                "\"BOOK_DOWNLOAD\" TEXT NOT NULL ," + // 8: book_download
                "\"BOOK_INTRODUCTION\" TEXT," + // 9: book_introduction
                "\"BOOK_READ_URL\" TEXT NOT NULL ," + // 10: book_read_url
                "\"COLLECTED_TIME\" TEXT);"); // 11: collected_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LONG_TIME_BOOK_COLLECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LongTimeBookCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBook_name());
        stmt.bindString(3, entity.getBook_image_url());
 
        String book_author = entity.getBook_author();
        if (book_author != null) {
            stmt.bindString(4, book_author);
        }
 
        String book_type = entity.getBook_type();
        if (book_type != null) {
            stmt.bindString(5, book_type);
        }
 
        String book_length = entity.getBook_length();
        if (book_length != null) {
            stmt.bindString(6, book_length);
        }
 
        String book_progress = entity.getBook_progress();
        if (book_progress != null) {
            stmt.bindString(7, book_progress);
        }
 
        String book_update_time = entity.getBook_update_time();
        if (book_update_time != null) {
            stmt.bindString(8, book_update_time);
        }
        stmt.bindString(9, entity.getBook_download());
 
        String book_introduction = entity.getBook_introduction();
        if (book_introduction != null) {
            stmt.bindString(10, book_introduction);
        }
        stmt.bindString(11, entity.getBook_read_url());
 
        String collected_time = entity.getCollected_time();
        if (collected_time != null) {
            stmt.bindString(12, collected_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LongTimeBookCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBook_name());
        stmt.bindString(3, entity.getBook_image_url());
 
        String book_author = entity.getBook_author();
        if (book_author != null) {
            stmt.bindString(4, book_author);
        }
 
        String book_type = entity.getBook_type();
        if (book_type != null) {
            stmt.bindString(5, book_type);
        }
 
        String book_length = entity.getBook_length();
        if (book_length != null) {
            stmt.bindString(6, book_length);
        }
 
        String book_progress = entity.getBook_progress();
        if (book_progress != null) {
            stmt.bindString(7, book_progress);
        }
 
        String book_update_time = entity.getBook_update_time();
        if (book_update_time != null) {
            stmt.bindString(8, book_update_time);
        }
        stmt.bindString(9, entity.getBook_download());
 
        String book_introduction = entity.getBook_introduction();
        if (book_introduction != null) {
            stmt.bindString(10, book_introduction);
        }
        stmt.bindString(11, entity.getBook_read_url());
 
        String collected_time = entity.getCollected_time();
        if (collected_time != null) {
            stmt.bindString(12, collected_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LongTimeBookCollection readEntity(Cursor cursor, int offset) {
        LongTimeBookCollection entity = new LongTimeBookCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // book_name
            cursor.getString(offset + 2), // book_image_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // book_author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // book_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // book_length
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // book_progress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // book_update_time
            cursor.getString(offset + 8), // book_download
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // book_introduction
            cursor.getString(offset + 10), // book_read_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // collected_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LongTimeBookCollection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBook_name(cursor.getString(offset + 1));
        entity.setBook_image_url(cursor.getString(offset + 2));
        entity.setBook_author(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBook_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBook_length(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBook_progress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBook_update_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBook_download(cursor.getString(offset + 8));
        entity.setBook_introduction(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBook_read_url(cursor.getString(offset + 10));
        entity.setCollected_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LongTimeBookCollection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LongTimeBookCollection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LongTimeBookCollection entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
