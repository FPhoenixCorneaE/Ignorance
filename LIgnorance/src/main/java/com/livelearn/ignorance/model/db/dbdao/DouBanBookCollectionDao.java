package com.livelearn.ignorance.model.db.dbdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.livelearn.ignorance.model.db.dbentity.DouBanBookCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOU_BAN_BOOK_COLLECTION".
*/
public class DouBanBookCollectionDao extends AbstractDao<DouBanBookCollection, Long> {

    public static final String TABLENAME = "DOU_BAN_BOOK_COLLECTION";

    /**
     * Properties of entity DouBanBookCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Book_id = new Property(1, String.class, "book_id", false, "BOOK_ID");
        public final static Property Book_name = new Property(2, String.class, "book_name", false, "BOOK_NAME");
        public final static Property Book_cover_url = new Property(3, String.class, "book_cover_url", false, "BOOK_COVER_URL");
        public final static Property Rating = new Property(4, String.class, "rating", false, "RATING");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
        public final static Property Publisher = new Property(6, String.class, "publisher", false, "PUBLISHER");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
    }


    public DouBanBookCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public DouBanBookCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOU_BAN_BOOK_COLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_ID\" TEXT NOT NULL ," + // 1: book_id
                "\"BOOK_NAME\" TEXT NOT NULL ," + // 2: book_name
                "\"BOOK_COVER_URL\" TEXT NOT NULL ," + // 3: book_cover_url
                "\"RATING\" TEXT," + // 4: rating
                "\"AUTHOR\" TEXT," + // 5: author
                "\"PUBLISHER\" TEXT," + // 6: publisher
                "\"TIME\" TEXT);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOU_BAN_BOOK_COLLECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DouBanBookCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBook_id());
        stmt.bindString(3, entity.getBook_name());
        stmt.bindString(4, entity.getBook_cover_url());
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(5, rating);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(7, publisher);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DouBanBookCollection entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBook_id());
        stmt.bindString(3, entity.getBook_name());
        stmt.bindString(4, entity.getBook_cover_url());
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(5, rating);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(7, publisher);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DouBanBookCollection readEntity(Cursor cursor, int offset) {
        DouBanBookCollection entity = new DouBanBookCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // book_id
            cursor.getString(offset + 2), // book_name
            cursor.getString(offset + 3), // book_cover_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rating
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // author
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publisher
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DouBanBookCollection entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBook_id(cursor.getString(offset + 1));
        entity.setBook_name(cursor.getString(offset + 2));
        entity.setBook_cover_url(cursor.getString(offset + 3));
        entity.setRating(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublisher(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DouBanBookCollection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DouBanBookCollection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DouBanBookCollection entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
