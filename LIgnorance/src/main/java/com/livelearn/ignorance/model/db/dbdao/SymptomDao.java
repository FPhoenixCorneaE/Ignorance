package com.livelearn.ignorance.model.db.dbdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.livelearn.ignorance.model.db.dbentity.Symptom;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYMPTOM".
*/
public class SymptomDao extends AbstractDao<Symptom, Long> {

    public static final String TABLENAME = "SYMPTOM";

    /**
     * Properties of entity Symptom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Symptom_id = new Property(1, String.class, "symptom_id", false, "SYMPTOM_ID");
        public final static Property Part_name = new Property(2, String.class, "part_name", false, "PART_NAME");
        public final static Property Part_id = new Property(3, String.class, "part_id", false, "PART_ID");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property Dept_id = new Property(5, String.class, "dept_id", false, "DEPT_ID");
        public final static Property Symptom_desc = new Property(6, String.class, "symptom_desc", false, "SYMPTOM_DESC");
        public final static Property Symptom_key_word = new Property(7, String.class, "symptom_key_word", false, "SYMPTOM_KEY_WORD");
    }


    public SymptomDao(DaoConfig config) {
        super(config);
    }
    
    public SymptomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYMPTOM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYMPTOM_ID\" TEXT," + // 1: symptom_id
                "\"PART_NAME\" TEXT," + // 2: part_name
                "\"PART_ID\" TEXT," + // 3: part_id
                "\"SEX\" TEXT," + // 4: sex
                "\"DEPT_ID\" TEXT," + // 5: dept_id
                "\"SYMPTOM_DESC\" TEXT," + // 6: symptom_desc
                "\"SYMPTOM_KEY_WORD\" TEXT);"); // 7: symptom_key_word
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYMPTOM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Symptom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String symptom_id = entity.getSymptom_id();
        if (symptom_id != null) {
            stmt.bindString(2, symptom_id);
        }
 
        String part_name = entity.getPart_name();
        if (part_name != null) {
            stmt.bindString(3, part_name);
        }
 
        String part_id = entity.getPart_id();
        if (part_id != null) {
            stmt.bindString(4, part_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String dept_id = entity.getDept_id();
        if (dept_id != null) {
            stmt.bindString(6, dept_id);
        }
 
        String symptom_desc = entity.getSymptom_desc();
        if (symptom_desc != null) {
            stmt.bindString(7, symptom_desc);
        }
 
        String symptom_key_word = entity.getSymptom_key_word();
        if (symptom_key_word != null) {
            stmt.bindString(8, symptom_key_word);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Symptom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String symptom_id = entity.getSymptom_id();
        if (symptom_id != null) {
            stmt.bindString(2, symptom_id);
        }
 
        String part_name = entity.getPart_name();
        if (part_name != null) {
            stmt.bindString(3, part_name);
        }
 
        String part_id = entity.getPart_id();
        if (part_id != null) {
            stmt.bindString(4, part_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String dept_id = entity.getDept_id();
        if (dept_id != null) {
            stmt.bindString(6, dept_id);
        }
 
        String symptom_desc = entity.getSymptom_desc();
        if (symptom_desc != null) {
            stmt.bindString(7, symptom_desc);
        }
 
        String symptom_key_word = entity.getSymptom_key_word();
        if (symptom_key_word != null) {
            stmt.bindString(8, symptom_key_word);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Symptom readEntity(Cursor cursor, int offset) {
        Symptom entity = new Symptom( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // symptom_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // part_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // part_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dept_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // symptom_desc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // symptom_key_word
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Symptom entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSymptom_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPart_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPart_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDept_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSymptom_desc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSymptom_key_word(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Symptom entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Symptom entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Symptom entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
