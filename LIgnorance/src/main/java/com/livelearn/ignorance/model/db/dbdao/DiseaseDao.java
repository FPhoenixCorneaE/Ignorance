package com.livelearn.ignorance.model.db.dbdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.livelearn.ignorance.model.db.dbentity.Disease;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISEASE".
*/
public class DiseaseDao extends AbstractDao<Disease, Long> {

    public static final String TABLENAME = "DISEASE";

    /**
     * Properties of entity Disease.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Disease_id = new Property(1, String.class, "disease_id", false, "DISEASE_ID");
        public final static Property Dept_id = new Property(2, String.class, "dept_id", false, "DEPT_ID");
        public final static Property Source = new Property(3, String.class, "source", false, "SOURCE");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Disease_name = new Property(5, String.class, "disease_name", false, "DISEASE_NAME");
    }


    public DiseaseDao(DaoConfig config) {
        super(config);
    }
    
    public DiseaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISEASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISEASE_ID\" TEXT UNIQUE ," + // 1: disease_id
                "\"DEPT_ID\" TEXT," + // 2: dept_id
                "\"SOURCE\" TEXT," + // 3: source
                "\"STATUS\" TEXT," + // 4: status
                "\"DISEASE_NAME\" TEXT);"); // 5: disease_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISEASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Disease entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String disease_id = entity.getDisease_id();
        if (disease_id != null) {
            stmt.bindString(2, disease_id);
        }
 
        String dept_id = entity.getDept_id();
        if (dept_id != null) {
            stmt.bindString(3, dept_id);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String disease_name = entity.getDisease_name();
        if (disease_name != null) {
            stmt.bindString(6, disease_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Disease entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String disease_id = entity.getDisease_id();
        if (disease_id != null) {
            stmt.bindString(2, disease_id);
        }
 
        String dept_id = entity.getDept_id();
        if (dept_id != null) {
            stmt.bindString(3, dept_id);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        String disease_name = entity.getDisease_name();
        if (disease_name != null) {
            stmt.bindString(6, disease_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Disease readEntity(Cursor cursor, int offset) {
        Disease entity = new Disease( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // disease_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dept_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // source
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // disease_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Disease entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDisease_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDept_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDisease_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Disease entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Disease entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Disease entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
