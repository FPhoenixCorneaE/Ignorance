package com.livelearn.ignorance.model.db.dbdao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.livelearn.ignorance.model.db.dbentity.ProvinceCity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROVINCE_CITY".
*/
public class ProvinceCityDao extends AbstractDao<ProvinceCity, Long> {

    public static final String TABLENAME = "PROVINCE_CITY";

    /**
     * Properties of entity ProvinceCity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property COUNTY_CODE = new Property(1, String.class, "COUNTY_CODE", false, "COUNTY__CODE");
        public final static Property CITY_CODE = new Property(2, String.class, "CITY_CODE", false, "CITY__CODE");
        public final static Property COUNTY_NAME = new Property(3, String.class, "COUNTY_NAME", false, "COUNTY__NAME");
        public final static Property CITY_NAME = new Property(4, String.class, "CITY_NAME", false, "CITY__NAME");
        public final static Property PROVINCE_NAME = new Property(5, String.class, "PROVINCE_NAME", false, "PROVINCE__NAME");
        public final static Property PROVINCE_CODE = new Property(6, String.class, "PROVINCE_CODE", false, "PROVINCE__CODE");
    }


    public ProvinceCityDao(DaoConfig config) {
        super(config);
    }
    
    public ProvinceCityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROVINCE_CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COUNTY__CODE\" TEXT UNIQUE ," + // 1: COUNTY_CODE
                "\"CITY__CODE\" TEXT," + // 2: CITY_CODE
                "\"COUNTY__NAME\" TEXT," + // 3: COUNTY_NAME
                "\"CITY__NAME\" TEXT," + // 4: CITY_NAME
                "\"PROVINCE__NAME\" TEXT," + // 5: PROVINCE_NAME
                "\"PROVINCE__CODE\" TEXT);"); // 6: PROVINCE_CODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROVINCE_CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProvinceCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String COUNTY_CODE = entity.getCOUNTY_CODE();
        if (COUNTY_CODE != null) {
            stmt.bindString(2, COUNTY_CODE);
        }
 
        String CITY_CODE = entity.getCITY_CODE();
        if (CITY_CODE != null) {
            stmt.bindString(3, CITY_CODE);
        }
 
        String COUNTY_NAME = entity.getCOUNTY_NAME();
        if (COUNTY_NAME != null) {
            stmt.bindString(4, COUNTY_NAME);
        }
 
        String CITY_NAME = entity.getCITY_NAME();
        if (CITY_NAME != null) {
            stmt.bindString(5, CITY_NAME);
        }
 
        String PROVINCE_NAME = entity.getPROVINCE_NAME();
        if (PROVINCE_NAME != null) {
            stmt.bindString(6, PROVINCE_NAME);
        }
 
        String PROVINCE_CODE = entity.getPROVINCE_CODE();
        if (PROVINCE_CODE != null) {
            stmt.bindString(7, PROVINCE_CODE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProvinceCity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String COUNTY_CODE = entity.getCOUNTY_CODE();
        if (COUNTY_CODE != null) {
            stmt.bindString(2, COUNTY_CODE);
        }
 
        String CITY_CODE = entity.getCITY_CODE();
        if (CITY_CODE != null) {
            stmt.bindString(3, CITY_CODE);
        }
 
        String COUNTY_NAME = entity.getCOUNTY_NAME();
        if (COUNTY_NAME != null) {
            stmt.bindString(4, COUNTY_NAME);
        }
 
        String CITY_NAME = entity.getCITY_NAME();
        if (CITY_NAME != null) {
            stmt.bindString(5, CITY_NAME);
        }
 
        String PROVINCE_NAME = entity.getPROVINCE_NAME();
        if (PROVINCE_NAME != null) {
            stmt.bindString(6, PROVINCE_NAME);
        }
 
        String PROVINCE_CODE = entity.getPROVINCE_CODE();
        if (PROVINCE_CODE != null) {
            stmt.bindString(7, PROVINCE_CODE);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProvinceCity readEntity(Cursor cursor, int offset) {
        ProvinceCity entity = new ProvinceCity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // COUNTY_CODE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CITY_CODE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // COUNTY_NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CITY_NAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PROVINCE_NAME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // PROVINCE_CODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProvinceCity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCOUNTY_CODE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCITY_CODE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCOUNTY_NAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCITY_NAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPROVINCE_NAME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPROVINCE_CODE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProvinceCity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProvinceCity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProvinceCity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
